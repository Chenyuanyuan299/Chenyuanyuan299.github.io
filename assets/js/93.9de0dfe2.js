(window.webpackJsonp=window.webpackJsonp||[]).push([[93],{460:function(t,a,e){"use strict";e.r(a);var s=e(45),r=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"初探-webpack"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#初探-webpack"}},[t._v("#")]),t._v(" 初探 Webpack")]),t._v(" "),e("p",[t._v("Webpack 最初需要解决的问题是：如何在前端项目中更高效地管理和维护项目中的每一个资源。")]),t._v(" "),e("h2",{attrs:{id:"模块化的演进过程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#模块化的演进过程"}},[t._v("#")]),t._v(" 模块化的演进过程")]),t._v(" "),e("p",[t._v("早期的前端技术标准根本没有预料到前端行业会有今天这个规模，所以在设计上存在许多缺陷，导致现在实现模块化会遇到许多问题。虽说如今许多问题已经被各种标准或者工具解决，但模块化的演进历史仍然值得我们思考，以下是几个代表阶段。")]),t._v(" "),e("h3",{attrs:{id:"阶段一-文件划分方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#阶段一-文件划分方式"}},[t._v("#")]),t._v(" 阶段一 文件划分方式")]),t._v(" "),e("p",[t._v("最早是基于文件划分的方式实现模块化，具体做法是将每个功能及其相关状态数据各自单独放到不同的 JS 文件中，约定每个文件是一个独立的模块。通过将模块引入页面来使用模块，每个 script 对应一个模块，然后直接调用模块中的变量或函数。")]),t._v(" "),e("p",[t._v("这种方式有一些缺点：")]),t._v(" "),e("ul",[e("li",[t._v("模块在全局工作，大量模块成员可能会污染全局作用域；")]),t._v(" "),e("li",[t._v("没有私有空间，所有模块内的成员都可以在模块外部被访问或者修改；")]),t._v(" "),e("li",[t._v("一旦模块增多，容易产生命名冲突；")]),t._v(" "),e("li",[t._v("无法管理模块与模块之间的依赖关系；")]),t._v(" "),e("li",[t._v("在维护的过程中也很难分辨每个成员所属的模块。")])])])}),[],!1,null,null,null);a.default=r.exports}}]);