(window.webpackJsonp=window.webpackJsonp||[]).push([[89],{462:function(t,s,a){"use strict";a.r(s);var n=a(45),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"vue-2-x-和-vue-3-x"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue-2-x-和-vue-3-x"}},[t._v("#")]),t._v(" Vue 2.x 和 Vue 3.x")]),t._v(" "),a("h2",{attrs:{id:"设计目标"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设计目标"}},[t._v("#")]),t._v(" 设计目标")]),t._v(" "),a("p",[t._v("Vue 3 相对于 Vue 2，做了很多方面的改进，Vue 3 的设计目标是：")]),t._v(" "),a("ul",[a("li",[t._v("更小")]),t._v(" "),a("li",[t._v("更快")]),t._v(" "),a("li",[t._v("TypeScript 支持")]),t._v(" "),a("li",[t._v("API 设计一致性")]),t._v(" "),a("li",[t._v("开放更多底层功能")])]),t._v(" "),a("h2",{attrs:{id:"优化方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优化方案"}},[t._v("#")]),t._v(" 优化方案")]),t._v(" "),a("p",[t._v("Vue 3 的优化可以从以下三个层面入手：")]),t._v(" "),a("ul",[a("li",[t._v("源码")]),t._v(" "),a("li",[t._v("性能")]),t._v(" "),a("li",[t._v("语法 API")])]),t._v(" "),a("h3",{attrs:{id:"源码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#源码"}},[t._v("#")]),t._v(" 源码")]),t._v(" "),a("p",[t._v("Vue 3 的源码采用了 monorepo 的方式进行管理，根据功能将不同的模块拆分到 packages 目录下的不同子目录中，这样使得模块拆分更细化，职责划分更明确，模块之间的依赖关系更明确，用户如果只想用其中的部分功能，可以单独依赖对应的库而不是引入整个 Vue。")]),t._v(" "),a("p",[t._v("Vue 3 对 TypeScript 做了支持，基于 TypeScript 来编写，提供了更好的类型检查，能支持复杂的类型推导。")]),t._v(" "),a("h3",{attrs:{id:"性能"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#性能"}},[t._v("#")]),t._v(" 性能")]),t._v(" "),a("p",[t._v("Vue 3 主要对以下三个方面对性能进行进一步优化：")]),t._v(" "),a("ul",[a("li",[t._v("体积优化")]),t._v(" "),a("li",[t._v("编译优化")]),t._v(" "),a("li",[t._v("响应式系统优化")])]),t._v(" "),a("p",[a("strong",[t._v("体积优化")])]),t._v(" "),a("p",[t._v("Vue 3 引入了 Tree-shaking，在打包时只会打包被使用到的文件，使打包的体积更小。Vue 2 则是打包整个库，不管是否使用到。")]),t._v(" "),a("p",[a("strong",[t._v("编译优化")])]),t._v(" "),a("p",[t._v("编译优化主要分为以下方面：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("diff 算法优化：\nVue 3 在 diff 算法中增加了静态标记，已经标记为静态的节点在 diff 过程中将不会被比较。同时，Vue 3 使用了最长递增子序列的思路，对 diff 算法做了优化，进一步提高了性能。")]),t._v(" "),a("p",[t._v("关于静态类型的枚举如下：")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" PatchFlags "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("TEXT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 动态的文本节点")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("CLASS")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2 动态的 class")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("STYLE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 4 动态的 style")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("PROPS")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 8 动态属性，不包括类名和样式")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("FULL_PROPS")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 16 动态 key，当 key 变化时需要完整的 diff 算法做比较")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HYDRATE_EVENTS")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 32 表示带有事件监听器的节点")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("STABLE_FRAGMENT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 64 一个不会改变子节点顺序的 Fragment")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("KEYED_FRAGMENT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 128 带有 key 属性的 Fragment")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("UNKEYED_FRAGMENT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 256 子节点没有 key 的 Fragment")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NEED_PATCH")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 512")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("DYNAMIC_SLOTS")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1024 动态 solt")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HOISTED")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 特殊标志是负整数表示永远不会用作 diff")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("BAIL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 一个特殊的标志，指代差异算法")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("静态提升：\nVue 3 中对不参与更新的元素，会做静态提升，只会被创建一次，在渲染时直接复用，这样就免去了重复的创建节点，大型应用会受益于这个改动，免去了重复的创建操作，优化了运行时候的内存占用：")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" _hoisted_1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*#__PURE__*/")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("_createVNode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"span"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"你好"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* HOISTED */")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("_ctx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" _cache"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" $props"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" $setup"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" $data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" $options")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("_openBlock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("_createBlock")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("_Fragment"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    _hoisted_1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("_createVNode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"div"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("_toDisplayString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("_ctx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("message"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* TEXT */")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("64")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* STABLE_FRAGMENT */")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("可以看到，静态内容"),a("code",[t._v("_hoisted_1")]),t._v("被放置在"),a("code",[t._v("render")]),t._v("函数外，每次渲染的时候只要取"),a("code",[t._v("_hoisted_1")]),t._v("即可，同时"),a("code",[t._v("_hoisted_1")]),t._v("被打上了 "),a("code",[t._v("PatchFlag")]),t._v("，静态标记值为 -1，表示永远不会用于 diff。")])]),t._v(" "),a("li",[a("p",[t._v("事件监听缓存\n默认情况下绑定事件行为会被视为动态绑定，所以每次都会去追踪它的变化，开启优化后，将去掉静态标记，在下次 diff 中直接使用。")])]),t._v(" "),a("li",[a("p",[t._v("SSR 优化\n当静态内容大到一定量级时候，会用"),a("code",[t._v("createStaticVNode")]),t._v("方法在客户端去生成一个 static node，这些静态 node，会被直接 innerHtml，就不需要创建对象，然后根据对象渲染。")])])]),t._v(" "),a("p",[a("strong",[t._v("响应式系统优化")])]),t._v(" "),a("p",[t._v("在 Vue 2.x 中，引入了虚拟 DOM，收集依赖的细粒度从具体的 DOM 节点调整为组件，Vue 2 封装了一个名为 defineReactive 的函数，通过使用 Object.defineProperty 来侦测变化，在 getter 中收集依赖，在 setter 中触发依赖（也就是将单条属性转变为响应式）。依赖将会收集到 Dep（一个封装的类，实例提供了一个收集依赖的数组）。数据通过 Observer（基于 defineReactive，深度遍历所有属性并将其转变为响应式），当外界通过 Watcher 读取数据时，会触发 getter 从而将 Watcher 添加到依赖中，当数据发生变化，触发 setter，从而向 Dep 中的 Watcher 发送通知。")]),t._v(" "),a("p",[t._v("使用 Object.defineProperty 存在一些问题，比如对一个对象进行删除和添加属性时不会被劫持，或者对一个数组进行监听，数组调用 api 时也不会被劫持。所以 Vue 2 增加了 set、delete，并添加了拦截器以及重写了数组的方法才实现了数组的劫持。")]),t._v(" "),a("p",[t._v("Vue 3.x 中，换成了 Proxy 对对象进行监听，Proxy 相比 Object.defineProperty，有以下几点优势：")]),t._v(" "),a("ul",[a("li",[t._v("Proxy 有更强大的拦截能力，有多达13种拦截方法，不只限于"),a("code",[t._v("apply")]),t._v("、"),a("code",[t._v("ownKeys")]),t._v("、"),a("code",[t._v("deleteProperty")]),t._v("、"),a("code",[t._v("has")]),t._v("，这是 Object.defineProperty 所不具备的；")]),t._v(" "),a("li",[t._v("Proxy 使用更简洁的语法来定义拦截行为，可以直接通过 Proxy 生成的新对象来操作原对象，而 Object.defineProperty 需要在原始对象上定义拦截器；")]),t._v(" "),a("li",[t._v("Proxy 可以对整个对象进行拦截，而 Object.defineProperty 只能对对象的指定属性进行拦截；")])]),t._v(" "),a("h3",{attrs:{id:"语法-api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#语法-api"}},[t._v("#")]),t._v(" 语法 API")]),t._v(" "),a("p",[t._v("Vue 2.x 使用 Options API，通过定义 methods、computed、watch 和 data 等属性与方法，共同处理页面逻辑，当组件变得复杂时，导致对应属性的列表也会增长，从而使组件难以阅读和理解，而在 Vue 3.x 中，换用 Composition API，组件根据逻辑功能来组织，一个功能所定义的所有 API 会放在一起（更加的高内聚，低耦合），即使项目很大，功能很多，我们都能快速的定位到这个功能所用到的所有 API。")]),t._v(" "),a("p",[t._v("同时，在 Vue 2.x 中用 mixin 来达到复用逻辑的效果，但是当混用过多后，首先会有命名冲突，其次数据来源也不清晰，造成了维护上的困难，使用 Composition API 的方式将更加清晰，并且少了很多 this 的使用，减少了 this 指向不明的问题。")])])}),[],!1,null,null,null);s.default=e.exports}}]);