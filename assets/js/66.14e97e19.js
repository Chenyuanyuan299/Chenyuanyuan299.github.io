(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{432:function(t,s,a){"use strict";a.r(s);var r=a(45),e=Object(r.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"模块化规范"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模块化规范"}},[t._v("#")]),t._v(" 模块化规范")]),t._v(" "),a("p",[t._v("模块化规范，即为 JavaScript 提供一种模块编写、模块依赖和模块运行的方案。它能降低代码复杂度，提高解耦性。")]),t._v(" "),a("p",[t._v("最原始的 JS 文件加载方式就是 Script 标签，如果把每一个文件看作一个模块，那么它们的接口通常暴露在全局作用域下，一些复杂的框架使用命名空间的概念来组织这些接口。这样的方式有一些很大的缺点：")]),t._v(" "),a("ol",[a("li",[t._v("污染全局作用域；")]),t._v(" "),a("li",[t._v("开发人员必须主观解决模块和代码库的依赖关系；")]),t._v(" "),a("li",[t._v("文件只能按照 script 标签的书写顺序进行加载；")]),t._v(" "),a("li",[t._v("在大型项目中各种资源难以管理，长期积累的问题导致代码库混乱不堪。")])]),t._v(" "),a("p",[t._v("默认情况下，浏览器是同步加载 JS 脚本的，渲染引擎遇到 <script> 就会停下，等到脚本加载完才继续渲染，如果是外部脚本还需要下载时间，这样很容易造成页面卡死。所以浏览器"),a("strong",[t._v("允许脚本异步加载")]),t._v("。")]),t._v(" "),a("p",[t._v("可以在<script> 中加上 async 或者 defer 字段来实现并行异步加载，所谓并行就是不阻塞渲染。两者的不同点是：")]),t._v(" "),a("ul",[a("li",[t._v("defer：等到页面渲染完才会执行下载完的脚本，并且是按顺序执行；")]),t._v(" "),a("li",[t._v("async：一旦下载完就会中断渲染，先执行脚本，多个脚本不保证按顺序执行。")])]),t._v(" "),a("h2",{attrs:{id:"commonjs-同步加载模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#commonjs-同步加载模块"}},[t._v("#")]),t._v(" CommonJS（同步加载模块）")]),t._v(" "),a("p",[t._v("通过 "),a("code",[t._v("require")]),t._v(" 方法"),a("strong",[t._v("同步加载")]),t._v("所依赖的模块，通过 "),a("code",[t._v("exports")]),t._v(" 或 "),a("code",[t._v("module.exports")]),t._v(" 导出需要暴露的数据。Serve 端的实现是 Node.js。")]),t._v(" "),a("h3",{attrs:{id:"定义模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定义模块"}},[t._v("#")]),t._v(" 定义模块")]),t._v(" "),a("p",[t._v("使用普通的函数写法就行：")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hello")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nmodules"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("export "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" hello\n")])])]),a("h3",{attrs:{id:"加载模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#加载模块"}},[t._v("#")]),t._v(" 加载模块")]),t._v(" "),a("ol",[a("li",[t._v("按路径加载；")]),t._v(" "),a("li",[t._v("查找 node_modules 目录加载；")]),t._v(" "),a("li",[t._v("加载后的模块会按照实际文件名缓存，如 "),a("code",[t._v("require('express')")]),t._v(" 和 "),a("code",[t._v("require('./node_modules/express')")]),t._v("，不会重复加载；")]),t._v(" "),a("li",[t._v("核心模块拥有最高的加载优先级。")])]),t._v(" "),a("h3",{attrs:{id:"导出模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#导出模块"}},[t._v("#")]),t._v(" 导出模块")]),t._v(" "),a("p",[t._v("Node.js 为每个模块提供一个 exports 变量，指向 module.exports。这相当于在每个模块头部，有一行这样的命令："),a("code",[t._v("var exports = module.exports;")]),t._v("，这两个东西实际指向同一个内存空间，前者是后者的引用。")]),t._v(" "),a("h3",{attrs:{id:"特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#特点"}},[t._v("#")]),t._v(" 特点")]),t._v(" "),a("ol",[a("li",[t._v("同步加载，适合于服务端；")]),t._v(" "),a("li",[t._v("所有的模块都有单独的作用域；")]),t._v(" "),a("li",[t._v("模块可以多次加载，但第一次加载就会运行一次，运行结果会被缓存，下次加载直接拿到缓存结果。")])]),t._v(" "),a("h2",{attrs:{id:"amd-asynchronous-module-definition-异步模块定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#amd-asynchronous-module-definition-异步模块定义"}},[t._v("#")]),t._v(" AMD (Asynchronous Module Definition) 异步模块定义")]),t._v(" "),a("p",[t._v("采用"),a("strong",[t._v("异步方式")]),t._v("加载模块，加载过程不影响后面语句的运行。依赖于这个模块的语句会被定义在回调函数中，等到加载完毕才执行。require.js 是 AMD 规范最热门的实现。")]),t._v(" "),a("h3",{attrs:{id:"定义模块-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定义模块-2"}},[t._v("#")]),t._v(" 定义模块")]),t._v(" "),a("p",[t._v("必须采用 define() 函数来定义，如果依赖其他模块还要先导入：")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("define")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("需要依赖的其他模块"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("add")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        doSomething"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n    \t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        add"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" add\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"加载模块-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#加载模块-2"}},[t._v("#")]),t._v(" 加载模块")]),t._v(" "),a("p",[t._v("同样使用 require 语句，但是要求有两个参数："),a("code",[t._v("require([module], callback);")]),t._v("，前者是一个数组，每一项是要加载的模块，后者是加载成功后的回调。")]),t._v(" "),a("h3",{attrs:{id:"导出模块-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#导出模块-2"}},[t._v("#")]),t._v(" 导出模块")]),t._v(" "),a("p",[t._v("与 CommonJS 相似。")]),t._v(" "),a("h3",{attrs:{id:"特点-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#特点-2"}},[t._v("#")]),t._v(" 特点")]),t._v(" "),a("ol",[a("li",[t._v("AMD 允许输出的模块兼容 CommonJS；")]),t._v(" "),a("li",[t._v("异步并行加载，不阻塞 DOM 渲染；")]),t._v(" "),a("li",[a("strong",[t._v("推崇依赖前置")]),t._v("，即预执行，在模块使用之前就已经执行完毕。")])]),t._v(" "),a("h2",{attrs:{id:"cmd-common-module-definition-通用模块定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cmd-common-module-definition-通用模块定义"}},[t._v("#")]),t._v(" CMD (Common Module Definition) 通用模块定义")]),t._v(" "),a("p",[t._v("CMD 与 AMD 类似，sea.js 是 CMD 规范的一个实现。")]),t._v(" "),a("h3",{attrs:{id:"定义、导入、导出"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定义、导入、导出"}},[t._v("#")]),t._v(" 定义、导入、导出")]),t._v(" "),a("p",[t._v("与 AMD 一样使用 define()，接收一个 factory 参数，可以是一个函数，也可以是一个对象或字符串；当 factory 作为函数时，接受三个参数："),a("code",[t._v("function(require, exports, module)")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("require 获取其他模块；")]),t._v(" "),a("li",[t._v("exports 用来向外提供模块接口；")]),t._v(" "),a("li",[t._v("module 存储与当前模块相关联的属性和方法。")])]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("define")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("require"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" exports"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" module")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" $ "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'jquery.js'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n  exports"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("price"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"特点-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#特点-3"}},[t._v("#")]),t._v(" 特点")]),t._v(" "),a("p",[t._v("与 AMD 类似，不同之处在于 AMD 是提前执行且依赖前置，而 CMD 是延迟执行且依赖就近。")]),t._v(" "),a("h2",{attrs:{id:"umd-universal-module-definition"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#umd-universal-module-definition"}},[t._v("#")]),t._v(" UMD (Universal Module Definition)")]),t._v(" "),a("p",[t._v("UMD 是 AMD 和 CommonJS 的糅合，它会先判断是否支持 Node.js 模块，存在则使用对应规范；然后判断是否支持 AMD，存在则使用对应规范；如果都不符合，则将模块公布到全局。")]),t._v(" "),a("h2",{attrs:{id:"es-module"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#es-module"}},[t._v("#")]),t._v(" ES Module")]),t._v(" "),a("p",[t._v("ES6 模块的设计思想，就是尽量的静态化，在编译时就确定模块的依赖关系，以及输入和输出的变量。")]),t._v(" "),a("h3",{attrs:{id:"定义模块-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定义模块-3"}},[t._v("#")]),t._v(" 定义模块")]),t._v(" "),a("p",[t._v("跟 CommonJS 类似，普通函数即可。")]),t._v(" "),a("h3",{attrs:{id:"加载模块-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#加载模块-3"}},[t._v("#")]),t._v(" 加载模块")]),t._v(" "),a("p",[t._v("使用 import 来导入模块，有很多种写法，不一一列举，看以下总结。")]),t._v(" "),a("h3",{attrs:{id:"导出模块-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#导出模块-3"}},[t._v("#")]),t._v(" 导出模块")]),t._v(" "),a("p",[t._v("使用 export 或者 export default。")]),t._v(" "),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("img",{attrs:{src:t.$withBase("/NodeJS/module.png"),alt:"module"}}),t._v(" "),a("h3",{attrs:{id:"require-exports-与-import-export-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#require-exports-与-import-export-的区别"}},[t._v("#")]),t._v(" require/exports 与 import/export 的区别")]),t._v(" "),a("p",[a("strong",[t._v("写法上")]),t._v("：")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// require/exports")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fs "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fs'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nexports"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fs "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fs\nmodule"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fs\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// import/export")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" fs "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fs'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" fs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fs'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" fs "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fs'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("readFile"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fs'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("readFile "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" read"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fs'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" fs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("readFile"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fs'")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" fs\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fs\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" readFile\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("readFile"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" read"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fs'")]),t._v("\n")])])]),a("p",[t._v("同时，require 可以使用表达式和变量，import 不行。因为前者是在运行时执行，后者在编译阶段执行，编译阶段无法识别这些东西。")]),t._v(" "),a("p",[a("strong",[t._v("输入上")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("require 引入的变量，基本类型做赋值，引用类型是浅拷贝，可以修改；")]),t._v(" "),a("li",[t._v("import 引入的变量，只读，不可修改，如果是对象，允许改写属性。")])]),t._v(" "),a("p",[a("strong",[t._v("执行上")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("require 不具有变量提升，模块在运行时加载；")]),t._v(" "),a("li",[t._v("import 具有变量提升，编译阶段就会加载模块并提升。")])]),t._v(" "),a("blockquote",[a("p",[t._v("ES2020 提案引入了 "),a("code",[t._v("import()")]),t._v(" 函数，支持动态加载模块，也就是运行时执行的 import，可以按需加载、条件加载和动态的模块路径。"),a("code",[t._v("import()")]),t._v(" 加载模块成功后，会返回一个 Promise 对象。")])]),t._v(" "),a("p",[t._v("require/exports 和 import/export 本质上的区别，实际上也就是 CommonJS 规范与 ES Module 规范的区别。它们分别运行在 node 环境和 js 环境，babel 可以将 import 编译为 nodejs 支持的 require；而浏览器想要使用这些语法还必须借助 browserify 或者 webpack 工具，将 require 编译为浏览器识别的语法。")]),t._v(" "),a("p",[t._v("CommonJS 与 ES Module 三大差异：")]),t._v(" "),a("ol",[a("li",[t._v("CommonJS 输出的是值的拷贝，ES Module 输出的是值的引用；")]),t._v(" "),a("li",[t._v("CommonJS 是运行时加载，ES Module 是编译时输出接口；")]),t._v(" "),a("li",[t._v("CommonJS 的 "),a("code",[t._v("require()")]),t._v(" 是"),a("strong",[t._v("同步加载")]),t._v("模块，ES Module 的 "),a("code",[t._v("import")]),t._v(" 命令是"),a("strong",[t._v("异步加载")]),t._v("，有一个独立的模块依赖的解析阶段。")])]),t._v(" "),a("p",[t._v("导致第二条差异的原因是：")]),t._v(" "),a("p",[t._v("CommonJS 加载的是一个对象（即 module.exports 属性），这个对象只有在脚本运行完才会生成。而 ES Module 加载的不是对象，而是通过 "),a("code",[t._v("export")]),t._v(" 命令显式指定输出的代码，再通过 "),a("code",[t._v("import")]),t._v(" 命令输入，它的对外接口只是一种静态定义，在代码静态解析阶段就会生成。")])])}),[],!1,null,null,null);s.default=e.exports}}]);